// Generated by CoffeeScript 2.7.0
var answer, born, count, country, echo, fideCheckDigit, fideIsValid, find, members, name, range;

echo = console.log;

range = _.range;

members = {};

// https://chatgpt.com/s/t_68ee8d15b2508191b461f981e133a99b
fideCheckDigit = function(numWithoutCheck) {
  var c, d, digits, i, j, r, sum, w, weights;
  weights = [2, 3, 4, 5, 6, 7];
  digits = (function() {
    var j, len, ref, results;
    ref = numWithoutCheck.toString();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      d = ref[j];
      results.push(parseInt(d));
    }
    return results;
  })();
  sum = 0;
  for (i = j = digits.length - 1; j >= 0; i = j += -1) {
    d = digits[i];
    w = weights[(digits.length - 1 - i) % 6];
    sum += d * w;
  }
  r = sum % 11;
  c = (11 - r) % 11;
  if (c === 10) {
    return 0;
  } else {
    return c;
  }
};

fideIsValid = function(fideNumber) {
  var check, num;
  num = Math.floor(fideNumber / 10);
  check = fideNumber % 10;
  return fideCheckDigit(num) === check;
};

// Exempel
console.log(fideCheckDigit(171035)); // → 4

console.log(fideIsValid(1710354)); // → true

console.log(fideIsValid(1710355)); // → false

(async function() {
  var err, res1;
  try {
    res1 = (await fetch('./databas.json'));
    return members = (await res1.json());
  } catch (error) {
    err = error;
    return console.error('Fel vid hämtning:', err);
  }
})();

// 0 name
// 1 S
// 2 R
// 3 B
// 4 born
// 5 country
find = function() {
  var antal, fragment, fragments, j, key, land, len, member, result, year;
  fragments = name.value ? name.value.split(' ') : [];
  echo(fragments.length);
  year = born.value || "";
  land = country.value || "";
  echo(year);
  result = [];
  for (key in members) {
    member = members[key];
    antal = 0;
    for (j = 0, len = fragments.length; j < len; j++) {
      fragment = fragments[j];
      if (member[0].includes(fragment)) {
        antal++;
      }
    }
    if (antal < fragments.length) {
      continue;
    }
    if (!`${member[4]}`.startsWith(year)) {
      continue;
    }
    if (!`${member[5]}`.startsWith(land)) {
      continue;
    }
    result.push(key + ' ' + member[0]);
    count.innerText = result.length;
    if (result.length >= 1000) {
      break;
    }
  }
  result.push;
  return textarea1.value = result.join('\n');
};

name = document.getElementById("name");

born = document.getElementById("born");

count = document.getElementById("count");

country = document.getElementById("country");

answer = document.getElementById("textarea1");

name.addEventListener('input', function(e) {
  return find();
});

born.addEventListener('input', function(e) {
  return find();
});

country.addEventListener('input', function(e) {
  return find();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJzZWFyY2guY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLFdBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQTs7QUFBQSxJQUFBLEdBQU8sT0FBTyxDQUFDOztBQUNmLEtBQUEsR0FBUSxDQUFDLENBQUM7O0FBRVYsT0FBQSxHQUFVLENBQUEsRUFIVjs7O0FBT0EsY0FBQSxHQUFpQixRQUFBLENBQUMsZUFBRCxDQUFBO0FBQ2pCLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtFQUFDLE9BQUEsR0FBVSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWDtFQUNWLE1BQUE7O0FBQVU7QUFBQTtJQUFBLEtBQUEscUNBQUE7O21CQUFBLFFBQUEsQ0FBUyxDQUFUO0lBQUEsQ0FBQTs7O0VBQ1YsR0FBQSxHQUFNO0VBQ04sS0FBQSw4Q0FBQTs7SUFDQyxDQUFBLEdBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBaEIsR0FBb0IsQ0FBckIsQ0FBQSxHQUEwQixDQUEzQjtJQUNYLEdBQUEsSUFBTyxDQUFBLEdBQUk7RUFGWjtFQUdBLENBQUEsR0FBSSxHQUFBLEdBQU07RUFDVixDQUFBLEdBQUksQ0FBQyxFQUFBLEdBQUssQ0FBTixDQUFBLEdBQVc7RUFDZixJQUFHLENBQUEsS0FBSyxFQUFSO1dBQWdCLEVBQWhCO0dBQUEsTUFBQTtXQUF1QixFQUF2Qjs7QUFUZ0I7O0FBYWpCLFdBQUEsR0FBYyxRQUFBLENBQUMsVUFBRCxDQUFBO0FBQ2QsTUFBQSxLQUFB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QU8sSUFBQSxDQUFBO0FBQVAsQ0FBL0I7O0FBQ0EsSUFBSSxDQUFDLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTyxJQUFBLENBQUE7QUFBUCxDQUEvQjs7QUFDQSxPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsUUFBQSxDQUFDLENBQUQsQ0FBQTtTQUFPLElBQUEsQ0FBQTtBQUFQLENBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiZWNobyA9IGNvbnNvbGUubG9nXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5cclxubWVtYmVycyA9IHt9XHJcblxyXG5cclxuIyBodHRwczovL2NoYXRncHQuY29tL3MvdF82OGVlOGQxNWIyNTA4MTkxYjQ2MWY5ODFlMTMzYTk5YlxyXG5maWRlQ2hlY2tEaWdpdCA9IChudW1XaXRob3V0Q2hlY2spIC0+XHJcblx0d2VpZ2h0cyA9IFsyLDMsNCw1LDYsN11cclxuXHRkaWdpdHMgPSAocGFyc2VJbnQoZCkgZm9yIGQgaW4gbnVtV2l0aG91dENoZWNrLnRvU3RyaW5nKCkpXHJcblx0c3VtID0gMFxyXG5cdGZvciBkLCBpIGluIGRpZ2l0cyBieSAtMVxyXG5cdFx0dyA9IHdlaWdodHNbKGRpZ2l0cy5sZW5ndGggLSAxIC0gaSkgJSA2XVxyXG5cdFx0c3VtICs9IGQgKiB3XHJcblx0ciA9IHN1bSAlIDExXHJcblx0YyA9ICgxMSAtIHIpICUgMTFcclxuXHRpZiBjIGlzIDEwIHRoZW4gMCBlbHNlIGNcclxuXHJcblxyXG5cclxuZmlkZUlzVmFsaWQgPSAoZmlkZU51bWJlcikgLT5cclxuICBudW0gPSBNYXRoLmZsb29yIGZpZGVOdW1iZXIgLyAxMFxyXG4gIGNoZWNrID0gZmlkZU51bWJlciAlIDEwXHJcbiAgZmlkZUNoZWNrRGlnaXQobnVtKSBpcyBjaGVja1xyXG5cclxuIyBFeGVtcGVsXHJcbmNvbnNvbGUubG9nIGZpZGVDaGVja0RpZ2l0IDE3MTAzNSAgIyDihpIgNFxyXG5jb25zb2xlLmxvZyBmaWRlSXNWYWxpZCAxNzEwMzU0ICAgICMg4oaSIHRydWVcclxuY29uc29sZS5sb2cgZmlkZUlzVmFsaWQgMTcxMDM1NSAgICAjIOKGkiBmYWxzZVxyXG5cclxuXHJcblxyXG5cclxuZG8gLT5cclxuXHR0cnlcclxuXHRcdHJlczEgPSBhd2FpdCBmZXRjaCgnLi9kYXRhYmFzLmpzb24nKSBcclxuXHRcdG1lbWJlcnMgPSBhd2FpdCByZXMxLmpzb24oKVxyXG5cdGNhdGNoIGVyclxyXG5cdFx0Y29uc29sZS5lcnJvciAnRmVsIHZpZCBow6RtdG5pbmc6JywgZXJyXHJcblxyXG4jIDAgbmFtZVxyXG4jIDEgU1xyXG4jIDIgUlxyXG4jIDMgQlxyXG4jIDQgYm9yblxyXG4jIDUgY291bnRyeVxyXG5cclxuZmluZCA9IC0+XHJcblx0ZnJhZ21lbnRzID0gaWYgbmFtZS52YWx1ZSB0aGVuIG5hbWUudmFsdWUuc3BsaXQgJyAnIGVsc2UgW11cclxuXHRlY2hvIGZyYWdtZW50cy5sZW5ndGhcclxuXHR5ZWFyID0gYm9ybi52YWx1ZSB8fCBcIlwiXHJcblx0bGFuZCA9IGNvdW50cnkudmFsdWUgfHwgXCJcIlxyXG5cdGVjaG8geWVhclxyXG5cdHJlc3VsdCA9IFtdXHJcblx0Zm9yIGtleSBvZiBtZW1iZXJzXHJcblx0XHRtZW1iZXIgPSBtZW1iZXJzW2tleV1cclxuXHRcdGFudGFsID0gMFxyXG5cclxuXHRcdGZvciBmcmFnbWVudCBpbiBmcmFnbWVudHNcclxuXHRcdFx0aWYgbWVtYmVyWzBdLmluY2x1ZGVzIGZyYWdtZW50IHRoZW4gYW50YWwrK1xyXG5cdFx0aWYgYW50YWwgPCBmcmFnbWVudHMubGVuZ3RoIHRoZW4gY29udGludWVcclxuXHJcblx0XHRpZiBub3QgXCIje21lbWJlcls0XX1cIi5zdGFydHNXaXRoIHllYXIgdGhlbiBjb250aW51ZVxyXG5cdFx0aWYgbm90IFwiI3ttZW1iZXJbNV19XCIuc3RhcnRzV2l0aCBsYW5kIHRoZW4gY29udGludWVcclxuXHJcblx0XHRyZXN1bHQucHVzaCBrZXkgKyAnICcgKyBtZW1iZXJbMF1cclxuXHRcdGNvdW50LmlubmVyVGV4dCA9IHJlc3VsdC5sZW5ndGhcclxuXHRcdGlmIHJlc3VsdC5sZW5ndGggPj0gMTAwMCB0aGVuIGJyZWFrXHJcblxyXG5cdHJlc3VsdC5wdXNoXHJcblx0dGV4dGFyZWExLnZhbHVlID0gcmVzdWx0LmpvaW4gJ1xcbidcclxuXHJcbm5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcIm5hbWVcIlxyXG5ib3JuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJib3JuXCJcclxuY291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcImNvdW50XCJcclxuY291bnRyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwiY291bnRyeVwiXHJcbmFuc3dlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwidGV4dGFyZWExXCJcclxuXHJcbm5hbWUuYWRkRXZlbnRMaXN0ZW5lciAnaW5wdXQnLCAoZSkgLT4gZmluZCgpXHJcbmJvcm4uYWRkRXZlbnRMaXN0ZW5lciAnaW5wdXQnLCAoZSkgLT4gZmluZCgpXHJcbmNvdW50cnkuYWRkRXZlbnRMaXN0ZW5lciAnaW5wdXQnLCAoZSkgLT4gZmluZCgpXHJcbiJdfQ==
//# sourceURL=c:\github\FIDE-ratinglist\search.coffee